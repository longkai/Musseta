buildscript {
  repositories {
    maven { url rootProject.ext.repositories.fabric }
  }
  dependencies {
    classpath rootProject.ext.dependencies.android
    classpath rootProject.ext.dependencies.retrolambda
    classpath rootProject.ext.dependencies.apt
    classpath rootProject.ext.dependencies.fabric
  }
}
apply plugin: rootProject.ext.plugins.android
apply plugin: rootProject.ext.plugins.retrolambda
apply plugin: rootProject.ext.plugins.apt
apply plugin: rootProject.ext.plugins.fabric

repositories {
  maven { url rootProject.ext.repositories.fabric }
}

def isCi = "true".equals(System.getenv("CI"))
def preDexEnabled = "true".equals(System.getProperty("pre-dex", "true"))

android {
  compileSdkVersion rootProject.ext.versions.compileSdk
  buildToolsVersion rootProject.ext.versions.buildTools

  dexOptions {
    // Skip pre-dexing when running on Travis CI or when disabled via -Dpre-dex=false.
    preDexLibraries = preDexEnabled && !isCi
  }
//  publishNonDefault true

  defaultConfig {
    applicationId "yuejia.liu.musseta"
    minSdkVersion 9
    targetSdkVersion rootProject.ext.versions.targetSdk
    versionCode 1
    versionName "1.0"

    manifestPlaceholders = ["channel": "dev"] // default to dev chanel

    testInstrumentationRunner 'yuejia.liu.musseta.MussetaTestingRunner'

    testInstrumentationRunnerArguments disableAnalytics: 'true'
//    testInstrumentationRunnerArgument "argument1", "make_test_fail"
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  signingConfigs {
    release {
      try {
        storeFile file(STORE_FILE)
        storePassword STORE_PASSWORD
        keyAlias KEY_ALIAS
        keyPassword KEY_PASSWORD
      } catch (ex) {
        throw new InvalidUserDataException("You should define KEYSTORE_PASSWORD and KEY_PASSWORD in gradle.properties.")
      }
    }
  }

  buildTypes {
    debug {
      testCoverageEnabled = true
      minifyEnabled true
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
//      testProguardFile 'proguard-test-rules.pro'
    }
    release {
      signingConfig signingConfigs.release
      minifyEnabled true
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }
  }

  // Always show the result of every unit test, even if it passes.
  testOptions.unitTests.all {
    testLogging {
      events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
    }
  }

  lintOptions {
    abortOnError false
    disable 'InvalidPackage'
  }

  packagingOptions {
    exclude 'META-INF/services/javax.annotation.processing.Processor'
    exclude 'LICENSE.txt'
  }

  productFlavors {
    alpha {
      applicationId android.defaultConfig.applicationId + '.alpha'
      ext.enableCrashlytics = false
      manifestPlaceholders = ["crashlytics": "provide your own crashlytics if you need in alpha flavor!"]
    }
    beta {
      applicationId android.defaultConfig.applicationId + '.beta'
      ext.enableCrashlytics = false
      manifestPlaceholders = ["crashlytics": "provide your own crashlytics if you need in beta flavor!"]
    }
    musseta {
      applicationId android.defaultConfig.applicationId
      manifestPlaceholders = ["channel": "musseta"]

      try {
        ext.enableCrashlytics = ENABLE_CRASHLYTICS.toBoolean()
        manifestPlaceholders = ["crashlytics": CRASHLYTICS_KEY]
      } catch (ex) {
        throw new InvalidUserDataException("You should define ENABLE_CRASHLYTICS and CRASHLYTICS_KEY in gradle.properties.")
      }
    }
  }
}

configurations {
  androidTestCompile.exclude group: 'com.android.support', module: 'support-v4'
  androidTestCompile.exclude group: 'com.android.support', module: 'recyclerview-v7'
}

dependencies {
  compile fileTree(dir: 'libs', include: ['*.jar'])

  compile rootProject.ext.dependencies.palette

  compile rootProject.ext.dependencies.rxandroid
  compile rootProject.ext.dependencies.rxjava

  compile rootProject.ext.dependencies.cardview
  compile rootProject.ext.dependencies.appcompat
  compile rootProject.ext.dependencies.design
  compile rootProject.ext.dependencies.recyclerview

  compile rootProject.ext.dependencies.butterKnife
  compile rootProject.ext.dependencies.timber
  compile rootProject.ext.dependencies.picasso
  compile rootProject.ext.dependencies.retrofit
  compile rootProject.ext.dependencies.okhttp
  compile rootProject.ext.dependencies.dagger
  apt rootProject.ext.dependencies.daggerCompiler
  provided rootProject.ext.dependencies.javax

  compile(rootProject.ext.dependencies.crashlytics) {
    transitive = true;
  }

  // testing
  androidTestCompile rootProject.ext.dependencies.mockito
  androidTestCompile rootProject.ext.dependencies.dexmaker
  androidTestCompile rootProject.ext.dependencies.dexmakerMockito

  androidTestCompile rootProject.ext.dependencies.rules
  androidTestCompile rootProject.ext.dependencies.runner
  androidTestCompile rootProject.ext.dependencies.espresso
  androidTestCompile rootProject.ext.dependencies.espressoContrib
  androidTestCompile rootProject.ext.dependencies.espressoIntents

  androidTestApt rootProject.ext.dependencies.daggerCompiler
}
